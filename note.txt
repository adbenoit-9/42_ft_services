Master :
	- 4 processes :
		- Api server : cluster gateway / gatekeeper (some request -> API server
			-> validate request -> other processes -> pod) => entrypoint to the 
			cluster
		- Scheduler : schedule new pod (request to AP server : where) => 		
			decides on which node new pod should be scheduled
		- controled manager : detects cluster state changes (ex : if pod dies,
			restart the pod)
		- etcd (cluster brain) : cluster changes get stored in the key value 
			store

Node:
	- compose of pods : application, database (services), secret, configmap
	- 3 processes : kubelet / kube proxy / container runtime

Application :
	- ConfigMap : external config of the application
	- db, user, pwd

MetalLB : handles every incoming request (=> from the user) => load balancer
  ||
  \/
Service :
	- permanant IP adress (connect databe & application)
	- 2 types: external / internal

Volumes :
	if db restarted
			=> data erased
				=> so save data (local or remote)

if app pod dies : need to restart the pod
	||
	|| solution
	\/
Replicate node:
	- replicate app => Deployement = change replicas in ConfigMap (ex : replicas = 2)
	- replicate DB  => StatefulSet => replicate the pods ++ (more complicated than deployement)



# Afficher la liste des Services
kubectl get service [En option <SERVICE NAME>]

# Créer un Service depuis un template
kubectl create -f <template.yaml>

# Créer un Service depuis sans template
kubectl expose deployment <DEPLOYMENT NAME>
    --name : nom du service
    --type : type du service
    --protocol : protocole à utiliser (TCP/UDP) 
    --port : port utilisé par le service 
    --target-port : port utilisé utilisé par le Pod 
    --selector='clé=valeur': le sélecteur utilisé par service 

# Supprimer un Service
kubectl delete service <SERVICE NAME>

# Appliquer des nouveaux changements à votre Service sans le détruire
kubectl apply -f <template.yaml>

# Modifier et appliquer les changements de votre Service instantanément sans le détruire
kubectl edit service <SERVICE NAME>

# Afficher les détails d'un Service
kubectl describe service <SERVICE NAME>